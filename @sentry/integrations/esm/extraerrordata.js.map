{"version":3,"file":"extraerrordata.js","sourceRoot":"","sources":["../src/extraerrordata.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventHint, EventProcessor, ExtendedError, Hub, Integration } from '@sentry/types';\nimport { isError, isPlainObject, logger, normalize } from '@sentry/utils';\n\n/** JSDoc */\ninterface ExtraErrorDataOptions {\n  depth?: number;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(private readonly _options: ExtraErrorDataOptions = { depth: 3 }) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n  public enhanceEventWithErrorData(event: Event, hint?: EventHint): Event {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n\n    const errorData = this._extractErrorData(hint.originalException as ExtendedError);\n\n    if (errorData) {\n      let extra = {\n        ...event.extra,\n      };\n\n      const normalizedErrorData = normalize(errorData, this._options.depth);\n      if (isPlainObject(normalizedErrorData)) {\n        extra = {\n          ...event.extra,\n          ...normalizedErrorData,\n        };\n      }\n\n      return {\n        ...event,\n        extra,\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private _extractErrorData(error: ExtendedError): { [key: string]: unknown } | null {\n    let result = null;\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      const name = error.name || error.constructor.name;\n      const errorKeys = Object.getOwnPropertyNames(error).filter(key => nativeKeys.indexOf(key) === -1);\n\n      if (errorKeys.length) {\n        const extraErrorInfo: { [key: string]: unknown } = {};\n        for (const key of errorKeys) {\n          let value = error[key];\n          if (isError(value)) {\n            value = (value as Error).toString();\n          }\n          // tslint:disable:no-unsafe-any\n          extraErrorInfo[key] = value;\n        }\n        result = {\n          [name]: extraErrorInfo,\n        };\n      }\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return result;\n  }\n}\n"]}